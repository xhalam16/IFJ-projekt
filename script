#!/bin/bash
test_count=0
fail_count=0

generate_test_summary() {
    echo "###############################################" >>result.txt
    echo "Test Summary:" >>result.txt
    echo "Total tests: $test_count" >>result.txt
    echo "Failed tests: $fail_count" >>result.txt
    echo "Passed percentage: $((100 - 100 * fail_count / test_count))%" >>result.txt
    echo "###############################################" >>result.txt
}

run_test() {
    test_count=$((test_count + 1))
    input_content="$1"
    expected_error_code=$2
    test_name="$3"

    # Clear the contents of test.txt
    >test.txt

    echo "$input_content" >test.txt

    ./parser >o.txt
    actual_error_code=$?
    echo actual_error_code: $actual_error_code
    if [ "$actual_error_code" -eq "$expected_error_code" ]; then
        echo "Test $3 PASSED!" >>result.txt
    else
        echo "Test $3 FAILED! Expected error code: $expected_error_code, Actual error code: $actual_error_code" >>result.txt
        fail_count=$((fail_count + 1))
    fi
}

# Run tests
>result.txt
run_test 'func foo() -> Int{
    var x : String = "abcd"
    var y : String = "s"
    return x + y
}' 4 "test1"

run_test 'func foo() -> Int{
    var x : String = "abcd"
    var y : Int = 1
    return x + y
}' 7

run_test 'func foo() -> Int{
    var x : String = "abcd"
    var y : String? = "s"
    return x + y
}' 7

run_test 'func foo() -> Int{
    var x : String = "abcd"
    var y : String? = "s"
    return x + y!
}' 4

run_test 'func foo() -> Int{
    var x : Int = 3
    var y : Int = 1
    return x + y
}' 0

run_test 'func foo() -> Int{
    var x : Int = 3
    var y : Double = 4.4
    return x + y
}' 7

run_test 'func foo() -> Int{
    var x : Int = 3
    return x + 4.4
}' 7

run_test 'func foo() -> Int{
    var x : Int = 3
    return x + 4
}' 0

run_test 'func foo() -> Int{
    var x : Double = 3.3
    return x + 4
}' 4

run_test 'func foo() -> Int{
    return 3.4 + 4.4
}' 4

run_test 'func foo() -> Int{
    return 3.4 + 4
}' 4

run_test 'func foo() -> Int{
    return 3 + 4.4
}' 4

run_test 'func foo() -> Int{
    return 3 + 4
}' 0

run_test 'func foo() -> Int{
    return "3" + "4"
}' 4

run_test 'func foo() -> Int{
    return "3" + 4
}' 7

run_test 'func foo() -> Int{
    return 3 + "4"
}' 7

run_test 'func foo() -> Int{
    return 3 + "4" + 5
}' 7

run_test 'func foo() -> Int{
    return 3 + "4" + "5"
}' 7

run_test 'func foo() -> Int{
    return 3.4 + "4"
}' 7

run_test 'func foo() -> Int{
    return 3.4 + "4" + 5
}' 7

run_test 'func foo() -> Int{
    return 3.4 + "4" + "5"
}' 7

run_test 'func foo() -> String{
    return "3" + "4" + "5"
}' 0

run_test 'func foo() -> Int{
    return "3" + "4" - "5"
}' 7

run_test 'func foo() -> Int{
    return "3" - "4" - "5"
}' 7

run_test 'func foo() -> Int{
    var x : String = "abcd"
    var y : String = "s"
    return x - y
}' 7

run_test 'func foo() -> Int{
    var x : String = "abcd"
    var y : Int = 1
    return x - y
}' 7

run_test 'func foo() -> Int{
    var x : String = "abcd"
    var y : String? = "s"
    return x - y
}' 7

run_test 'func foo() -> Int{
    var x : String? = "abcd"
    var y : String? = "s"
    return x! - y!
}' 7

run_test 'func foo() -> String{
    var x : String? = "abcd"
    var y : String? = "s"
    return x! + y!
}' 0

run_test 'func foo() -> Int{
    var x : String? = "abcd"
    var y : String? = "s"
    return x! + y
}' 7

run_test 'func foo() -> Int?{
    return nil
}' 0 "nil return nilable"

run_test 'func foo() -> Int{
    return nil
}' 4 "nil return non-nilable"

run_test 'func foo() -> Int?{
    return nil + 3
}' 7 "nil plus int"

run_test 'func foo() -> Int?{
    return nil + "3"
}' 7 "nil plus string"

run_test 'func foo() -> Int?{
    return nil + 3.3
}' 7 "nil plus double"

run_test 'func foo() -> Int?{
    return nil + nil
}' 7 "nil plus nil"

run_test 'func foo() -> Int?{
    return 3 - nil
}' 7 "int minus nil"

run_test 'func foo() -> Int?{
    return "3" - nil
}' 7 "string minus nil"

run_test 'func foo() -> Int?{
    return 3.3 - nil
}' 7 "double minus nil"

run_test 'func foo() -> Int?{
    var x : Int? = 3
    return x + nil
}' 7 "x variable nilable plus nil"

run_test 'func foo() -> Int?{
    var x : Int? = 3
    return x - nil
}' 7 "x variable nilable minus nil"

run_test 'func foo() -> Int?{
    var x : Int? = 3
    return nil + x
}' 7 "nil plus x variable nilable"

run_test 'func foo() -> Int?{
    var x : Int = 3
    return nil - x
}' 7 "nil minus x variable"

run_test 'func foo() -> Int?{
    return 3
}' 0 "int return"

run_test 'func foo() -> Int?{
    return "3"
}' 4 "string return"

run_test 'func foo() -> Int?{
    return 3.3
}' 4 "double return"

run_test 'func foo() -> Int?{
    return 3 + 4
}' 0 "int return"

run_test 'func foo() -> Int{
    return 3 + 4
}' 0 "int return non-nilable"

run_test 'func foo() -> Int{
    return (nil + nil)
}' 7 "nil plus nil parentheses"

run_test 'func foo() -> Int{
    return (nil + nil) * 3
}' 7 "nil plus nil parentheses times int"

run_test 'func foo() -> Int{
    return (nil + nil) * 3.3
}' 7 "nil plus nil parentheses times double"

run_test 'func foo() -> Int{
    return (nil + nil) * "3"
}' 7 "nil plus nil parentheses times string"

run_test 'func foo() -> Int{
    return (nil + nil) / 3
}' 7 "nil plus nil parentheses divide int"

run_test 'func foo() -> Int?{
    return (nil)
}' 0 "nil in parentheses"

run_test 'func foo() -> Int{
    var x : Int? = 3
    return x
}' 4 "int? return"

run_test 'func foo() -> Int{
    var x : Int? = 3
    return x!
}' 0 "int? return unwrapped"

run_test 'func foo() -> Int{
    var x : Int? = 3
    return x! + 3
}' 0 "int? return unwrapped plus int"

run_test 'func foo() -> Int{
    var x : Int? = 3
    return x! + 3.3
}' 7 "int? return unwrapped plus double"

run_test 'func foo() -> Int{
    var x : Int? = 3
    return x! + "3"
}' 7 "int? return unwrapped plus string"

run_test 'func foo() -> Int{
    var x : Int? = 3
    return x! + x!
}' 0 "int? return unwrapped plus int?"

run_test 'func foo() -> Double{
    var x : Double? = 3.6
    var y : Double? = 3.3
    return x! + y!
}' 0 "double? return unwrapped plus double?"

run_test 'func foo() -> Double{
    var x : Double? = 3.6
    var y : Double? = 3.3
    return x! + y! + 3.3
}' 0 "double? return unwrapped plus double? plus double"

run_test 'func foo() -> String{
    var x : String? = "3.6"
    var y : String? = "3.3"
    return x! + y!
}' 0 "string? return unwrapped plus double?"

run_test 'func foo() -> String{
    var x : String? = "3.6"
    var y : String? = "3.3"
    return x! + y! + "3"
}' 0 "double? return unwrapped plus double? plus string"

run_test 'func foo() -> String{
    var x : String? = "3.6"
    var y : String? = "3.3"
    return x! + y
}' 7 "double? return unwrapped plus double? not unwrapped"

run_test 'func foo() -> Int{
    var x : Int? = 3
    var y : Int? = 3
    return x! + y
}' 7 "int? return unwrapped plus int? not unwrapped"

run_test 'func foo() -> Double{
    var x : Double? = 3.6
    var y : Double? = 3.3
    return x! + y
}' 7 "double? return unwrapped plus double?  not unwrapped"

run_test 'func foo() -> String?{
    var x : Int? = nil
    return x + "3"
}' 7 "variable with nil value in expression"

run_test 'func foo() -> Double?{
    var x : Double? = nil
    return x + 3.3
}' 7 "variable with nil value in expression"

run_test 'func foo() -> String?{
    var x : String? = nil
    return "3" + x
}' 7 "variable with nil value in expression"

run_test 'func foo() -> String?{
    var x : String? = nil
    return x
}' 0 "variable with nil alone String? return"

run_test 'func foo() -> Int?{
    var x : Int? = nil
    var y : Double = 3.3
    return x
}' 0 "variable with nil alone Int? return"

run_test 'func foo() -> Double{
    return 3.3 / 4.4
}' 0 "division double return"

run_test 'func foo() -> Double{
    return 3.3 / 4
}' 0 "division double return"

run_test 'func foo() -> Double{
    return 3 / 4.4
}' 0 "division double return"

run_test 'func foo() -> Int{
    return 3 / 4
}' 0 "division Int return"

run_test 'func foo() -> Int{
    return 3 / 4.4
}' 4 "division Int return"

run_test 'func foo() -> Int{
    return 3.3 / 4
}' 4 "division Int return"

run_test 'func foo() -> Int{
    return nil ?? 3
}' 0 "nil coallescing int return"

run_test 'func foo() -> Int{
    return nil ?? 3.3
}' 4 "nil coallescing int return"

run_test 'func foo() -> Int{
    return nil ?? "3"
}' 4 "nil coallescing int return"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return x ?? 3
}' 0 "nil coallescing int return"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return x ?? (3 + 3)
}' 0 "nil coallescing int return"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return x ?? (3 + 3.3)
}' 4 "nil coallescing int return"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return x + 3 ?? (3)
}' 7 "nil coallescing int return"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return x ?? nil
}' 7 "x (nil) coallescing nil"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return nil ?? x
}' 9 "nil coallescing x (nil)"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return x ?? x
}' 9 "x (nil) coallescing x (nil)"

run_test 'func foo() -> Int{
    let x : Int? = nil
    return nil ?? nil
}' 7 "nil coallescing nil"

run_test 'func foo() -> Int?{
    let x : Int = 3
    return x + 3
}' 0 "int expression int? return"

run_test 'func foo() -> Int?{
    let x : Int = 3
    return x + 3.3
}' 7 "int expression int? return"

run_test 'func foo() -> Int?{
    let x : Int = 3
    return x + "3"
}' 7 "int expression int? return"

run_test 'func foo() -> Int?{
    let x : Int = 3
    return x + nil
}' 7 "int expression int? return"

run_test 'func foo() -> Int?{
    let x : Int = 3
    return x - 3
}' 0 "int expression int? return"

run_test 'func foo() -> Int?{
    let x : Int? = 3
    let y : Int? = 4
    return x - y
}' 7 "int expression int? return"

# udělej mi nějaké testy na ify a while a fory a funkce a všechno co jde

run_test 'func foo() -> Int{
    return 3
}' 0 "int return"

run_test 'func foo() -> Int{
    return 3 + 3
    return 8
    return "abcd"
}' 4 "int return"

run_test 'func foo() -> Int{
    return 3 + 3
    return 8
    return 3.3
}' 4 "int return"

run_test 'func foo() -> Int{
    return 3 + 3
    return 8
    return 3
}' 0 "int return"

run_test 'func foo() -> Double{
    return 3 + 3
    return 8
    return 3 + 3
}' 0 "int return"

run_test 'func foo() -> Double{
    var x : Int = 3
    var y : Int = 4
    if x > y {
        return 3
    } else {
        return 4
    }

    return 8
    return 9
}' 0 "4 returns all valid"

run_test 'func foo() -> Double{
    var x : Int = 3
    var y : Int = 4
    if x > y {
        return "string"
    } else {
        return 4
    }

    return 8
    return 9
}' 4 "4 returns one invalid"

run_test 'func foo() -> Double{
    return 3 + 3
    return 8
    return 3.3 + 3.3
}' 0 "int return"

run_test 'func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    if x > y {
        return 3
    }
    return 4
}' 2 "if statement"

run_test 'func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    if x > y {
        return 3
    } else {
        return 4
    }
}' 0 "if else statement"

run_test 'func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    if x > y {
        return 3
    } else {
        return 4
    }
    return 5
}' 0 "if else statement"

run_test 'func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    if x > y {
        return 3
    } else {
        return 4
    }
    return
}' 6 "return in if else statement"

run_test 'foo(x, y)' 3 "function call"

run_test 'let message = "Hello, Swift!"
print(message)' 3 "print"

run_test 'let number = 42
if number / 2 == 0 {
    print("Even number")
} else {
    print("Odd number")
}' 3 "if else print"

run_test 'func greet(name: String) -> String {
    return "Hello!"
}

let greeting = greet(name: "John")
greet(greeting)' 2 "function call"

run_test 'var optionalValue: String? = "Hello, Optional!"

if let value  {
    print(value)
} else {
    print("Value is nil")
}' 5 "if let"

run_test 'let message = "Chybný řetězec' 2 "wrong string"

run_test 'let sum = (5 + 3' 2 "wrong parentheses"

run_test 'let result = "5" + 3' 7 "string + int"

run_test 'func square(_ x: Int) -> Int {
    return x * x
}

square(1)' 0 "function call"

#built-in functions
run_test '
    readString()
' 0 "readString call"

run_test '
    readString(3)
    ' 4 "readString with argument"

run_test 'readString(3, 4, "abcd")' 4 "too many arguments"

run_test '
    let x : String
    x = readString()
' 9 "readString wrong assign"

run_test '
    let x : String
    x = readString(3)
' 9 "readString wrong assign with wrong call"

run_test '
    let x : String?
    x = readString(3)
' 9 "readString wrong assign into constant with wrong call"

run_test '
    var x : String?
    x = readString()
' 0 "readString correct assign with correct call"

run_test 'var x : String?
    x = readString(3)' 4 "readString correct assign with wrong call"

run_test 'var x : String
    x = readString()' 7 "correct call with wrong assign"

run_test '
    var x : String?
    x = readString()
    x = readString()' 0 "readString correct assign with correct call"

run_test '
    let x : String?
    x = readString()
    x = readString(3)' 9 "readString correct assign with wrong call"

run_test 'var x: Int' 0 "Valid Variable Declaration - Int"
run_test 'var y = 42' 0 "Valid Variable Declaration with Initialization - Int"
run_test 'var z: Double = 3.14' 0 "Valid Variable Declaration - Double with Initialization"
run_test 'var a: String' 0 "Valid Variable Declaration - String"
run_test 'var b: Int?' 0 "Valid Variable Declaration - Optional Int"
run_test 'var c: Double? = 3.14' 0 "Valid Variable Declaration - Optional Double with Initialization"
run_test 'var d: String?' 0 "Valid Variable Declaration - Optional String"
run_test 'let e: Int' 0 "Valid Constant Declaration - Int"
run_test 'let f = "hello"' 0 "Valid Constant Declaration with Initialization - String"
run_test 'let g: Double = 42' 0 " Double with Initialization"
run_test 'let h: Int?' 0 "Valid Constant Declaration - Optional Int"
run_test 'let i: String?' 0 "Valid Constant Declaration - Optional String"

run_test '
    var x : Int = 3
    var y : Int = 4
    while x > y {
    } 
' 0 "while statement"

run_test '
    func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    while x > y {
        return 3
    } 
    return 4
}' 0 "while statement"

run_test '
    func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    while x + 3 > y {
        return 3
    } 
    return 4
}' 0 "while statement"

run_test '
    func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    while x <= y {
        return 3
    } 
    return 4
}' 0 "while statement"

run_test '
    func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    while x == y {
        return 3
    } 
    return 4
}' 0 "while statement"

run_test 'while sdsdsdsdsdsds {

}' 7 "while statement wrong"

run_test '
    let y = 6
    while y {

    }
' 7 "while statement wrong"

#scope tests
run_test '
    func foo() -> Int{
    var x : Int = 3
    var y : Int = 4
    while x == y {
        var x : Int = 3
        var y : Int = 4
        return 3
    } 
    return 4
}' 0 "while statement"

run_test '
    func foo(_ param : String) -> Int{
    return param
}' 4 "wrong function call"

run_test 'func foo(_ param : Int) -> Int{
    return param
}

if(3 > 4){
    let y = 6
    foo(y)
}else{
    let y = 9
    foo(y)
}

let y = 6
foo(y)' 0 "multiple scopes"

run_test 'func foo(_ param : Int) -> Int{
    return param
}

var x : Int = 8
while(x == 3){
    let y = 6
    foo(y)
}

let y = 6
foo(y)' 0 "multiple scopes"

run_test 'func foo(_ param : Int) -> Int{
    return param
}' 0 "func correct param return"

run_test 'func foo(_ param : Int) -> Int{
    return param + 3
}' 0 "func correct param return"

run_test 'func foo(_ param : Int) -> Int{
    return param + "string"
}' 7 "func correct param return"

run_test 'func foo(_ param : Int) -> Int{
    return param
}

let x = nil
if let x{
    foo(x)
}' 8 "wrong declaration"

run_test 'func foo(_ param : Int) -> Int{
    return param
}

let x : Int? = nil
if let x{
    foo(x)
}else{

}' 0 "correct declaration correct guard let"

run_test 'func foo(_ param : Int) -> Int{
    return param
}

let x : String? = nil
if let x{
    foo(x)
}else{

}' 4 "wrong param type"

run_test '
func foo(_ param : String) -> String{
    return param
}

let x : String = "45"
if let x{
    foo(x)
}else{

}' 9 "wrong guard let typing"

run_test '
    func foo() -> Int?{
        let x : Int? = 3
        if let x{
            return x!
        }else{
            return nil
        }
    }
' 7 "unwrapping in guard let - wrong"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}

foo("string", x: 3)' 0 "correct function call literals"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}

foo("string", 3)' 4 "correct literals missing label"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}
let x : String? = "abcd"
let y : Int? = 3

foo(x, y)' 4 "correct variables missing label"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}
let x : String? = "abcd"
let y : Int? = 3

foo(x, x: y)' 0 "correct function call variables"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}
let x : String = "abcd"
let y : Int = 3

foo(x, x: y)' 0 "correct function call variables"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}

foo("string", x: "string")' 4 "wrong function call"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}

foo("string", x: 4, 3)' 4 "wrong param count"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}

foo(y: "string", x: 4, 3)' 4 "label where it should not be"

run_test '
func foo(_ param : String, x param2 : Int){
    return
}

foo(y: "string", 4)' 4 "label where it should not be and missing label"

run_test '
let x : Int? = nil
let y : String = "abcd"
    
let z = x ?? y
' 7 "coallescing wrong types"

run_test 'func foo(_ param : Int, _ param2 : String, _ param3 : Double) -> Int{
    
    return 5
}
foo(10, "String", 1.247)
if (2 > 10) {
    foo(10, "String", 1.247)
}' 2 "wrong if statement"

run_test 'let x = 3
while x {}' 7 "while statement"

run_test 'func y(lol x : Int, XD s : Int) -> Int{
    return x
    if x > 3 {
        var xd : Int = s
    } else {
        y(lol : s, XD : 36478)
    }

    while 1 / 8 < 1 {
        return s
    }
}
var x = 10
y(lol : x, XD : 10)' 0 "function call"

run_test '
var a = 10
a = Int2Double(a)
a = a + 4' 0 "function call"

run_test '
var a = Int2Double(a)
a = a + 4' 4 "function call wrong param"

run_test 'var str1 = "Toto je nejaky text v programu jazyka IFJ23"
let str2 = str1 + ", ktery jeste trochu obohatime"
write(str1, "\n", str2, "\n")
let i = length(str1)
write("Pozice retezce \"text\" v str2: ", i, "\n")
write("Zadejte serazenou posloupnost vsech malych pismen a-h, ")
let newInput = readString()
if let newInput {
        str1 = newInput
        while (str1 != "abcdefgh") {
                write("Spatne zadana posloupnost, zkuste znovu:\n")
                let tmp = readString()
                str1 = tmp ?? ""
        } 
} else {}' 0 "example 1"

run_test '// Program 1: Vypocet faktorialu (iterativne)
/* Hlavni telo programu */
write("Zadejte cislo pro vypocet faktorialu\n")
let a : Int? = readInt()
if let a {
        if (a < 0) {write("Faktorial nelze spocitat\n")
        } else {
                var a = Int2Double(a)
                var vysl : Double = 1
                while (a > 0){
                        vysl = vysl * a
                        a = a - 1
                }
                write("Vysledek je: ", vysl, "\n")
        }
} else{
        write("Chyba pri nacitani celeho cisla!\n")
}' 0 "example 8.1"

run_test '// Program 2: Vypocet faktorialu (rekurzivne)
// Hlavni telo programu
write("Zadejte cislo pro vypocet faktorialu: ")

let inp = readInt()
// pomocna funkce pro dekrementaci celeho cisla o zadane cislo
func decrement(of n: Int, by m: Int) -> Int {
        return n - m
}
// Definice funkce pro vypocet hodnoty faktorialu
func factorial(_ n : Int) -> Int {
        var result : Int?
        if (n < 2) {
                result = 1
        } else {
                let decremented_n = decrement(of: n, by: 1)
                let temp_result = factorial(decremented_n)
                result = n * temp_result
        }
        return result!
}
// pokracovani hlavniho tela programu
if let inp {
        if (inp < 0)    { // Pokracovani hlavniho tela programu
            write("Faktorial nelze spocitat!")
        } else {
            let vysl = factorial(inp)
            write("Vysledek je: ", vysl)
        } 
} else {
        write("Chyba pri nacitani celeho cisla!")
}' 0 "example 8.2"


run_test 'func foo() -> Int {
    return 3 < 4
}' 4 "wrong return type"

run_test 'func foo() -> Int {
    let x = 3
    let y = 4
    return x > y
}' 4 "wrong return type"

run_test 'while 3 + 4 {

}' 7 "wrong while condition"


run_test '
let x = 4
let y = 5
while x + 5 {

}' 7 "wrong while condition"


run_test 'var a : Int = 5
func xd(_ a : Int, with param : String) -> Int {
    return 10
}' 0 "function declaration"

generate_test_summary
